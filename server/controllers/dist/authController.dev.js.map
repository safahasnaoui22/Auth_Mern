{"version":3,"sources":["authController.js"],"names":["User","require","bcrypt","jwt","exports","signup","req","res","next","findOne","email","body","user","error","Error","statusCode","hash","password","hashedPassword","create","newUser","token","sign","_id","process","env","JWT_SECRET","expiresIn","status","json","message","name","role","login","compare","isPasswordValid"],"mappings":"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","sourcesContent":["const User = require('../models/userModel.js');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// Register\r\nexports.signup = async (req, res, next) => {\r\n    try {\r\n        const user = await User.findOne({ email: req.body.email });\r\n\r\n        if (user) {\r\n            const error = new Error('User already exists!');\r\n            error.statusCode = 400;\r\n            throw error;\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(req.body.password, 12);\r\n\r\n        const newUser = await User.create({\r\n            ...req.body,\r\n            password: hashedPassword,\r\n        });\r\n\r\n        const token = jwt.sign({ _id: newUser._id }, process.env.JWT_SECRET, {\r\n            expiresIn: '1d',\r\n        });\r\n\r\n        res.status(201).json({\r\n            status: 'success',\r\n            message: 'User registered successfully',\r\n            token,\r\n            user: {\r\n                _id: newUser._id,\r\n                name: newUser.name,\r\n                email: newUser.email,\r\n                role: newUser.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n};\r\n\r\n\r\n// Login\r\nexports.login = async (req, res, next) => {\r\n    try {\r\n        const { email, password } = req.body;\r\n        const user = await User.findOne({ email });\r\n\r\n        if (!user) {\r\n            const error = new Error('User not found');\r\n            error.statusCode = 404;\r\n            throw error;\r\n        }\r\n\r\n        const isPasswordValid = await bcrypt.compare(password, user.password);\r\n\r\n        if (!isPasswordValid) {\r\n            const error = new Error('Incorrect Password or Email');\r\n            error.statusCode = 401;\r\n            throw error;\r\n        }\r\n\r\n        const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {\r\n            expiresIn: '1d',\r\n        });\r\n\r\n        res.status(200).json({\r\n            status: 'success',\r\n            token,\r\n            message: 'Logged in Successfully',\r\n            user: {\r\n                _id: user._id,\r\n                name: user.name,\r\n                email: user.email,\r\n                role: user.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n};\r\n"],"file":"authController.dev.js"}