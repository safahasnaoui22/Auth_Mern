{"version":3,"sources":["authController.js"],"names":["User","require","bcrypt","jwt","exports","signup","req","res","next","error","hashedPassword","newUser","token","regeneratorRuntime","async","_context","prev","awrap","findOne","email","body","sent","Error","statusCode","password","create","_objectSpread","sign","_id","process","env","JWT_SECRET","expiresIn","status","json","user","name","role","t0","stop","compare","message","_context2"],"mappings":"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","file":"authController.min.js","sourcesContent":["const User = require('../models/userModel.js');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n// Register\r\nexports.signup = async (req, res, next) => {\r\n    try {\r\n        const user = await User.findOne({ email: req.body.email });\r\n\r\n        if (user) {\r\n            const error = new Error('User already exists!');\r\n            error.statusCode = 400;\r\n            throw error;\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(req.body.password, 12);\r\n\r\n        const newUser = await User.create({\r\n            ...req.body,\r\n            password: hashedPassword,\r\n        });\r\n\r\n        const token = jwt.sign({ _id: newUser._id }, process.env.JWT_SECRET, {\r\n            expiresIn: '1d',\r\n        });\r\n\r\n        res.status(201).json({\r\n            status: 'success',\r\n            message: 'User registered successfully',\r\n            token,\r\n            user: {\r\n                _id: newUser._id,\r\n                name: newUser.name,\r\n                email: newUser.email,\r\n                role: newUser.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n};\r\n\r\n\r\n// Login\r\nexports.login = async (req, res, next) => {\r\n    try {\r\n        const { email, password } = req.body;\r\n        const user = await User.findOne({ email });\r\n\r\n        if (!user) {\r\n            const error = new Error('User not found');\r\n            error.statusCode = 404;\r\n            throw error;\r\n        }\r\n\r\n        const isPasswordValid = await bcrypt.compare(password, user.password);\r\n\r\n        if (!isPasswordValid) {\r\n            const error = new Error('Incorrect Password or Email');\r\n            error.statusCode = 401;\r\n            throw error;\r\n        }\r\n\r\n        const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {\r\n            expiresIn: '1d',\r\n        });\r\n\r\n        res.status(200).json({\r\n            status: 'success',\r\n            token,\r\n            message: 'Logged in Successfully',\r\n            user: {\r\n                _id: user._id,\r\n                name: user.name,\r\n                email: user.email,\r\n                role: user.role,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n};\r\n"]}